function P=gPrimalSol(N,family)
%CS, 21/08/22
% structure P has all the data, including primal and dual output
% obtained when solving LP's without decomposing and making explicit
% nonanticipatity constraints
% fieldnames of P are
%{ P.N; P.nx; seed ; F1 ; F2s ; xis ; M (these are generated by GenInstance)
%  ; dualLPf ; dualLPw ; dualh
%  ; primalLPf ; primalLPx ; primalLPy ; primalLPw
%  ; primalh   ; primalLPredc
%}
% computes solution of 2-stage problem  of the form
% min oF1(x)+E(oF2s(y_s))
% s.t. x,y_s geq 0
%      x leq P.xub
%      P.Tmat x + P.Wmat y_s eq P.h_s\in R for s=1:N, the number of scenarios
%  in the implementation we add slacks to ensure relatively complete recourse (feasibility)
% convex first-stage objective, gradient and Hessian: oF1,gF1,hF1
% convex second-stage objective, gradient and Hessian: oF2s,gF2s,hF2s

%generate first one instance and solve the primal problem
P.N=N;P.family=family; P.repeat = true;
P=gGenInstance(P);
% if there is not solution, a new instance is generated below
% we try up to 20 times, counter it
   it=1;
   status=0;
   while ((status !=101)&&(it <21)),
     lb=zeros(P.all,1);ub=Inf+lb;ub(P.ind_x,1)=P.xub;
     P.xyz_init=min(ub,max(lb,[mean(P.h_s)*ones(P.nx,1);ones(P.all-P.nx,1)]));
     [xyzmin, fmin, status, iter, nf, lambda] = mysqp (P.xyz_init,
     {@(xyz)f_o (xyz,P), @(xyz)g_o (xyz,P), @(xyz)h_o (xyz,P)},
     {@(xyz)f_ec (xyz,P), @(xyz)g_ec (xyz,P)}, %no Hessian for constraints
     [],% no inequality constraints
     lb,ub,500,1d-6); %OJO had to change MaxIter and TolX for qp to run in Octave
     if status !=101, N=P.N;family=P.family; clear P;P.N=N;P.family=family;P=gGenInstance(P);end
     it=it+1;
   endwhile
   P.success= status ==101;
   if P.success;
      fprintf('N=%i,\tfmin=%d,\t tried %i times\n',P.N,fmin,it-1);
      P.primalf=fmin;
      P.primalx(P.ind_x,1)=xyzmin(P.ind_x,1);
      P.primaly(P.ind_y,1)=xyzmin(P.ind_y,1);
      P.primalz(P.ind_z,1)=xyzmin(P.ind_z,1);
   else
      fprintf('N=%i,failed to generate feasible instance, \t tried %i times\n',P.N,it-1);
      P=[];
   end
return
end
